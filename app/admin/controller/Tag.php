<?php


namespace app\admin\controller;

use app\model\Book;
use app\model\Chapter;
use app\service\TagsService;
use Overtrue\Pinyin\Pinyin;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\facade\View;
use think\facade\App;
use app\model\Tags;
use think\exception\ValidateException;
use app\validate\Image;

class Tag extends BaseAdmin
{
    protected $tagsService;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->tagsService = app('tagsService');
    }

    public function index(){
        $data = $this->tagsService->getPagedAdmin();
        View::assign([
            'tags' => $data['tags'],
            'count' => $data['count']
        ]);
        return view();
    }

    public function create(){
        if (request()->isPost()) {
            try {
                validate(\app\validate\Tag::class)->scene('edit')->check(
                    ['tag_name'=>input('tag_name')]
                );
            }catch (ValidateException $e){
                return json(['err'=>1,'msg'=>$e->getMessage()]);
            }
            $tag = new Tags();
            $tag->tag_name = input('tag_name');
            $dir = 'tags';
            if (!empty(request()->file())) {
                $cover = request()->file('cover');
                try {
//                    validate(Image::class)
//                        ->check(['image'=>$cover]);
//                    $savename =str_replace ( '\\', '/',
//                        \think\facade\Filesystem::disk('public')->putFile($dir, $cover));
//                    if (!is_null($savename)) {
//                        $tag->cover_url = '/static/upload/'.$savename;
//                    }
                    $tag->cover_url = $this->uploadImg($cover,$dir);
                } catch (ValidateException $e) {
                    return json(['err' =>1,'msg'=>$e->getMessage()]);
                }
            }

            $result = $tag->save();
            if ($result) {
                return json(['err' =>0,'msg'=>'添加成功']);
            } else {
                return json(['err' =>1,'msg'=>'添加失败']);
            }
        }
        return view();
    }

    public function edit(){
        $id = input('id');
        try {
            $tag = Tags::findOrFail($id);
            if (request()->isPost()) {
                try {
                    validate(\app\validate\Tag::class)->scene('edit')->check([
                        'tag_name'=>input('tag_name')
                    ]);
                }catch (ValidateException $e){
                    return json(['err'=>1,'msg'=>$e->getMessage()]);
                }
                $tag->tag_name = input('tag_name');
                if (!empty(request()->file())) {
                    $cover = request()->file('cover');
                    try {
                        $dir = 'tags';
//                        validate(Image::class)
//                            ->check(['image'=>$cover]);
//                        $savename =str_replace ( '\\', '/',
//                            \think\facade\Filesystem::disk('public')->putFile($dir, $cover));
//                        if (!is_null($savename)) {
//                            $tag->cover_url = '/static/upload/'.$savename;
//                        }
                        $tag->cover_url = $this->uploadImg($cover,$dir);
                    } catch (ValidateException $e) {
                        return json(['err' =>1,'msg'=>$e->getMessage()]);
                    }
                }
                $result = $tag->save();
                if ($result) {
                    return json(['err' =>0,'msg'=>'修改成功']);
                } else {
                    return json(['err' =>1,'msg'=>'修改失败']);
                }
            }
            View::assign([
                'tag' => $tag,
            ]);
            return view();
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }

    public function delete()
    {
        $id = input('id');
        $res = Book::where('tags_id',$id)->find();
        if ($res){
            return json(['err'=>'1','msg' => '正在使用不能删除']);
        }
        $result = Tags::destroy($id);
        if ($result) {
            return json(['err' => '0','msg' => '删除成功']);
        } else {
            return json(['err' => '1','msg' => '删除失败']);
        }
    }

    public function enable()
    {
        if (request()->isPost()) {
            $id = input('id');
            try {
                $tag = Tags::findOrFail($id);
                $tag->is_show = 1;
                $result = $tag->save();
                if ($result) {
                    return json(['err' =>0]);
                } else {
                    return json(['err' =>1,'msg'=>'操作失败']);
                }
            } catch (DataNotFoundException $e) {
                return json(['err' => '1','msg' => $e->getMessage()]);
            } catch (ModelNotFoundException $e) {
                return json(['err' => '1','msg' => $e->getMessage()]);
            }
        }
    }

    public function disable()
    {
        if (request()->isPost()) {
            $id = input('id');
            try {
                $tag = Tags::findOrFail($id);
                $tag->is_show = 0;
                $result = $tag->save();
                if ($result) {
                    return json(['err' =>0]);
                } else {
                    return json(['err' =>1]);
                }
            } catch (DataNotFoundException $e) {
                return json(['err' => '1','msg' => $e->getMessage()]);
            } catch (ModelNotFoundException $e) {
                return json(['err' => '1','msg' => $e->getMessage()]);
            }
        }
    }



    public function editSort()
    {
        if (request()->isPost()){
            $id = request()->param('id');
            $sort = request()->param('sort');
            try {
                validate(\app\validate\Tag::class)->scene('sort')->check([
                        'id'=>$id,
                        'sort'=>$sort
                    ]);
            }catch (ValidateException $e){
                return json(['err' =>1,'msg'=>$e->getMessage()]);
            }
            $table = Tags::find($id);
            $table->sort = $sort;
            $table->save();
            return json(['err' =>0,'msg'=>'修改成功']);
        }
    }

}