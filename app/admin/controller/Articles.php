<?php


namespace app\admin\controller;


use app\model\Article;
use app\model\Book;
use Overtrue\Pinyin\Pinyin;
use think\Exception;
use think\facade\App;
use think\facade\Db;
use think\facade\View;

class Articles extends BaseAdmin
{
    protected $articleService;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->articleService = app('articleService');
    }

    public function index()
    {
        $data = $this->articleService->getPagedAdmin();
        View::assign([
            'articles' => $data['articles'],
            'count' => $data['count']
        ]);
        return view();
    }

    public function create()
    {
        if (request()->isPost()) {
            $title = trim(input('title'));
            $article = new Article();
            $article['title'] = $title;
            $article['unique_id'] = $this->convert($title);
            $article['desc'] = input('desc');
            $article['book_id'] = input('book_id');
            $content = input('content');
            $dir = App::getRootPath() . 'public/static/upload/article/';
            $savename = md5($title) . '.txt';
            file_put_contents($dir . $savename, $content);
            $article['content_url'] = '/static/upload/article/' . $savename;
            $article->save();
            $this->success('添加成功', 'index', 1);
        }
        return view();
    }

    public function match()
    {
        if (request()->isPost()) {
            $start = input('start');
            $last = input('last');
            $map[] = ['id', '<=', $last];
            $map[] = ['id', '>=', $start];
            $books = Book::where($map)->select();
            foreach ($books as $book) {
                $result = Db::query(
                    "select * from " . $this->prefix . "article where match(title) 
            against ('" . $book->book_name . "' IN NATURAL LANGUAGE MODE) LIMIT 1"
                );
                if (count($result) > 0) {
                    $article_id = intval($result[0]['id']);
                    if ($article_id > 0) {
                        try {
                            $article = Article::findOrFail($article_id);
                            $article->book_id = $book->id;
                            $article->save();
                            echo $book->book_name.'匹配到文章' . $article->title . '<br />';
                        } catch (Exception $e) {
                            echo '数据出错<br />';
                        }
                    }
                    ob_flush(); //将 php buffer 数据强制输出到 tcp buffer
                    flush(); // 将 tcp buffer 数据强制输出到浏览器
                } else {
                    echo $book->book_name.'未能匹配到相关文章<br />';
                    ob_flush(); //将 php buffer 数据强制输出到 tcp buffer
                    flush(); // 将 tcp buffer 数据强制输出到浏览器
                }
            }
            echo "匹配完成";
        }
        return view();
    }

    public function search()
    {
        $title = input('title');
        $where = [
            ['title', 'like', '%' . $title . '%']
        ];
        $data = $this->articleService->getPagedAdmin($where);
        View::assign([
            'articles' => $data['articles'],
            'count' => $data['count']
        ]);
        return view('index');
    }

    public function delete()
    {
        $id = input('id');
        $result = Article::destroy($id);
        if ($result) {
            return json(['err' => '0', 'msg' => '删除成功']);
        } else {
            return json(['err' => '1', 'msg' => '删除失败']);
        }
    }

    public function deleteAll($ids)
    {
        $ids = input('ids');
        $result = Article::destroy($ids);
        if ($result) {
            return json(['err' => '0', 'msg' => '删除成功']);
        } else {
            return json(['err' => '1', 'msg' => '删除失败']);
        }
    }

    protected function convert($str)
    {
        $pinyin = new Pinyin();
        $str = $pinyin->abbr($str);
        return $str;
    }
}