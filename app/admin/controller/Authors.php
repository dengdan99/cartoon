<?php

namespace app\admin\controller;

use app\service\AuthorService;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\facade\View;
use app\model\Author;

class Authors extends BaseAdmin
{
    protected $authorService;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->authorService = app('authorService');
    }

    public function index()
    {
        $authorService = new AuthorService();
        $data = $this->authorService->getAuthors();
        View::assign([
            'authors' => $data['authors'],
            'count' => $data['count']
        ]);
        return view();
    }

    public function edit() {
        $id = input('id');
        try {
            $author = Author::findOrFail($id);
            if ($author->status == 0) {
                $author->status = 1;
            } else {
                $author->status = 0;
            }
            $result = $author->save();
            if ($result) {
                return json(['err' => '0','msg' => '修改状态成功']);
            } else {
                return json(['err' => '1','msg' => '修改状态失败']);
            }
        } catch (DataNotFoundException $e) {
            return json(['err' => '1','msg' => $e->getMessage()]);
        } catch (ModelNotFoundException $e) {
            return json(['err' => '1','msg' => $e->getMessage()]);
        }
    }

    public function delete()
    {
        $id = input('id');
        try {
            $author = Author::findOrFail($id);
            $books = $author->books;
            if (count($books) > 0){
                return json(['err' => '1','msg' => '该作者名下还有作品，请先删除所有作品']);
            }
            $result = $author->delete();
            if ($result) {
                return json(['err' => '0','msg' => '删除成功']);
            } else {
                return json(['err' => '1','msg' => '删除失败']);
            }
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }

    public function deleteAll($ids){
        $ids = input('ids');
        $res = Author::select($ids);
        if (!empty($res)){
            foreach ($res as $author){
                $books = $author->books;
                if (count($books) > 0){
                    return json(['err' => '1','msg' => '该作者名下还有作品，请先删除所有作品']);
                }
            }
        }
        Author::destroy($ids);
        return json(['err' => '0','msg' => '批量删除成功']);
    }

    public function getBooksByAuthor($author_name){
        $data = $this->authorService->getBooksByAuthor($author_name); //查出书籍
        View::assign([
            'books' => $data['books'],
            'count' => count($data['books'])
        ]);
        return view('books/index');
    }

    public function search($author_name){
        $data = $this->authorService->getAuthors([
            ['author_name','like','%'.$author_name.'%']
        ]);
        View::assign([
            'authors' => $data['authors'],
            'count' => $data['count']
        ]);
        return view('index');
    }
}