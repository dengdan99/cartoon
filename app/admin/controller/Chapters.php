<?php


namespace app\admin\controller;

use app\common\Download;
use app\common\Upload;
use app\common\ZipFiles;
use app\model\Photo;
use app\service\ChapterService;
use app\model\Book;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\exception\ValidateException;
use think\facade\View;
use app\model\Chapter;

class Chapters extends BaseAdmin
{
    protected $chapterService;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->chapterService = app('chapterService');
    }

    public function index()
    {
        $book_id = input('book_id');
        try {
            $book = Book::withTrashed()->find($book_id);
            if (empty($book)) {
                throw new ModelNotFoundException('book不存在');
            }
            $data = $this->chapterService->getChapters([
                ['book_id', '=', $book_id]
            ]);
            View::assign([
                'chapters' => $data['chapters'],
                'count' => $data['count'],
                'book' => $book
            ]);
            return view();
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }

    public function create()
    {
        if (request()->isPost()) {
            $data = request()->param();
            $result = Chapter::create($data);
            if ($result) {
                $param = [
                    "id" => $data["book_id"],
                    "last_time" => time()
                ];
                $result2 = Book::update($param);
                if ($result2) {
                    return json(['err' => 0, 'msg' => '添加成功']);
                } else {
                    return json(['err' => 1, 'msg' => '添加失败']);
                }
            } else {
                return json(['err' => 1, 'msg' => '添加失败']);
            }
        }
        $book_id = input('book_id');
        $lastChapterOrder = 0;
        $lastChapter = $this->chapterService->getLastChapter($book_id);
        if ($lastChapter) {
            $lastChapterOrder = $lastChapter->chapter_order;
        }
        View::assign([
            'book_id' => $book_id,
            'order' => $lastChapterOrder + 1,
        ]);
        return view();
    }

    public function edit()
    {
        if (request()->isPost()) {
            $data = request()->param();
            try {
                $chapter = Chapter::findOrFail($data['id']);
                $result = $chapter->save($data);
                if ($result) {
                    return json(['err' => 0, 'msg' => '修改成功']);
                } else {
                    return json(['err' => 1, 'msg' => '修改失败']);
                }
            } catch (DataNotFoundException $e) {
                abort(404, $e->getMessage());
            } catch (ModelNotFoundException $e) {
                abort(404, $e->getMessage());
            }

        }
        $id = input('id');
        try {
            $chapter = Chapter::findOrFail($id);
            View::assign([
                'chapter' => $chapter,
            ]);
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
        return view();
    }

    public function delete()
    {
        $id = input('id');
        try {
            $chapter = Chapter::findOrFail($id);
            $photos = $chapter->photos;
            if (count($photos) > 0) {
                return ['err' => 1, 'msg' => '章节下还存在图片，请先删除'];
            }
            $chapter->delete();
            return ['err' => 0, 'msg' => '删除成功'];
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }

    public function deleteAll()
    {
        $ids = input('ids');
        Chapter::destroy($ids);
    }

    public function editSort()
    {
        if (request()->isPost()) {
            $id = request()->param('id');
            $sort = request()->param('sort');
            try {
                validate(\app\validate\Chapter::class)->scene('sort')
                    ->check([
                        'id' => $id,
                        'chapter_order' => $sort
                    ]);
            } catch (ValidateException $e) {
                return json(['err' => 1, 'msg' => $e->getMessage()]);
            }
            $table = Chapter::find($id);
            $table->chapter_order = $sort;
            $table->save();
            return json(['err' => 0, 'msg' => '修改成功']);
        }
    }

    public function downloadAllPhotos()
    {
        $id = input('id');
        try {
            $chapter = Chapter::findOrFail($id);
            $data = Photo::where('chapter_id', '=', $chapter->id)->order('pic_order', 'desc')->select();
            if ($data->count() <= 0) {
                throw new ModelNotFoundException('这个章节没有图片可以下载');
            }
            $book =Book::withTrashed()->find($chapter->book_id);
            if (empty($book)) {
                throw new ModelNotFoundException('book不存在');
            }
            $upload = new Upload();

            $path = 'static/upload/book/' . $chapter->book_id . '/chapter/' . $chapter->id;
            //压缩文件存放路径
            $path_photo = $path.'/photos';

            //循环的目的是为了将txt文件和jpg文件都方到photos目录去
            foreach ($data->toArray() as $item) {
                $suffix = $upload->getSuffix($item['img_url']);
                if (strcmp($suffix, 'txt') === 0) {
                    $content = @file_get_contents($item['img_url']);
                    //将txt文件丢在photo文件夹
                    base64_image_content($content, $path_photo, $item['pic_order']);
                    continue;
                }
                $content = @file_get_contents($item['img_url']);
                if (empty($content)) {
                    continue;
                }
                //图片文件丢在Photo文件夹
                saveImagePubZip($path_photo, $content, $suffix, $item['pic_order']);
            }

            if (!file_exists(public_path() . $path_photo)) {
                throw new ModelNotFoundException('没有发现可被下载的图片');
            }

            //定义压缩文件的文件名
            $zipName = $path . '/'.$chapter->book_id.'_'.$chapter->id.'.zip';
            #throw new ModelNotFoundException('path:'.public_path().$path);

            // 如果压缩文件不存在，就创建压缩文件
            $absFile = public_path().$zipName;
            if (!is_file($absFile)) {
                if (!file_exists($absFile)) {
                    #mkdir(public_path().$path, 0775, true);
                    #file_put_contents($absFile, '');
                    $fp = @fopen($absFile, 'w');
                    if (!$fp) {
                        throw new ModelNotFoundException('文件:'.$path.'写入失败');
                    }
                    fclose($fp);
                }
            }
            //检查文件是否可以写
            if (!is_writable($absFile)) {
                throw new ModelNotFoundException('文件:'.$absFile.' 无写入权限或文件不存在');
            }

            $zip = new \ZipArchive();
            // OVERWRITE选项表示每次压缩时都覆盖原有内容，但是如果没有那个压缩文件的话就会报错，所以事先要创建好压缩文件
            // 也可以使用CREATE选项，此选项表示每次压缩时都是追加，不是覆盖，如果事先压缩文件不存在会自动创建
            if ($zip->open($zipName, \ZipArchive::OVERWRITE) === true) {
                $current = 'photo'; // 你要压缩的文件的主目录
                ZipFiles::addFileToZip(public_path().$path_photo, $current, $zip);
                $zip->close();
                if (!Download::downloadFile($zipName, $book->book_name.'-'.$chapter->chapter_name.'.zip')) {
                    throw new ModelNotFoundException('下载失败');
                } else {
                    delete_dir_file(public_path().$path);
                    @unlink(public_path().$zipName);
                }
            } else {
                throw new ModelNotFoundException('下载失败');
            }
        } catch (DataNotFoundException $e) {
            throw new ModelNotFoundException('章节不存在');
        } catch (ModelNotFoundException $e) {
            throw new ModelNotFoundException('异常:'.$e->getMessage());
        }
    }

}